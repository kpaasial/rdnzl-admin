
# Macros

INT_IF="rl0"

ICMP_TYPES="{ unreach echoreq }"

ICMP6_TYPES="{ unreach toobig timex paramprob echoreq routeradv routersol neighbradv neighbrsol }"

PORT_SSH_EXTERNAL = 50022

PORT_XMISSION = 51413

IP_SIXXS_POP_DNA = 62.78.96.38

# Tables

# Bogons

# IPv4 fullbogons
table <ip_fullbogons_ipv4> persist
IP_FULLBOGONS_IPV4 = "<ip_fullbogons_ipv4>"

# IPv6 fullbogons
table <ip_fullbogons_ipv6> persist
IP_FULLBOGONS_IPV6 = "<ip_fullbogons_ipv6>"

# Spamhaus DROP and EDROP lists
table <ip_drop> persist
IP_DROP = "<ip_drop>"

table <ip_edrop> persist
IP_EDROP = "<ip_edrop>"


set block-policy return
set loginterface egress
set optimization conservative

set skip on lo

# scrub incoming packets
match in all scrub (no-df random-id)

# match rules

match out on rl1 inet from any to 192.168.1.0/24 nat-to 192.168.1.200

match out on rl1 inet from any to 192.168.2.0/24 nat-to 192.168.2.200


match out on egress inet from !(egress:network) to any nat-to (egress:0)


# filter rules


# Default deny rule(s)
block all label "DEFAULT_DENY"
block inet6 all label "DEFAULT_DENY_IPV6"


# Rules for dropping unwanted traffic
# -----------------------------------------------------------------------------

# Silence log noise on egress from igmp(4) traffic.
block quick on egress inet from any to 224.0.0.0/4

# Exceptions to block rules that follow

# Allow all icmp6(4) to ff02::/16
pass quick inet6 proto icmp6 from any to ff02::/16 label "PASS_FF02_16_DST"

# Same for fe80::/10 to fe80::/10 and fe80::/10 to ff02::/16
pass quick inet6 proto icmp6 from fe80::/10 to fe80::/10 label "PASS_FE80_10_SRC_FE80_10_DST"
pass quick inet6 proto icmp6 from fe80::/10 to ff02::/16 label "PASS_FE80_10_SRC_FF02_16_DST"

antispoof quick for { egress $INT_IF }

# Block traffic from/to IPv4 bogons on egress.
block drop in log quick on egress inet from $IP_FULLBOGONS_IPV4 to any \
    label "BLOCK_IPV4_FULLBOGONS_SRC"
block return out log quick on egress inet from any to $IP_FULLBOGONS_IPV4 \
    label "BLOCK_IPV4_FULLBOGONS_DST"

# Block traffic from/to IPv6 bogons on egress.
block drop in log quick on egress inet6 from $IP_FULLBOGONS_IPV6 to any \
    label "BLOCK_IPV6_FULLBOGONS_SRC"
block return out quick log on egress inet6 from any to $IP_FULLBOGONS_IPV6 \
    label "BLOCK_IPV6_FULLBOGONS_DST"


# SixXS recommends blocking this prefix.
block drop in log quick on egress inet6 from fd00::/48 to any \
    label "BLOCK_$if_FD00_48_SRC"
block drop in log quick on egress inet6 from any to fd00::/48 \
    label "BLOCK_$if_FD00_48_DST"


# Block anything on Spamhaus E/DROP list, in or out.
# These are IPv4 only.

# Any connection coming in on INT_IF to DROP IPs
# Return so the connections fail immediately and are not stuck waiting.
block return in log quick on $INT_IF inet from any to $IP_DROP \
    label "BLOCK_$if_DROP_DST"
block return in log quick on $INT_IF inet from any to $IP_EDROP \
    label "BLOCK_$if_EDROP_DST"

# Any connection from DROP IP addresses to any address on egress, always drop.
block drop in log quick on egress inet from $IP_DROP to any \
    label "BLOCK_$if_DROP_SRC"
block drop in log quick on egress inet from $IP_EDROP to any \
    label "BLOCK_$if_EDROP_SRC"

# Any connections made to DROP IP addresses from the firewall itself.
block return out log quick on egress inet from any to $IP_DROP \
    label "BLOCK_$if_DROP_DST"
block return out log quick on egress inet from any to $IP_EDROP \
    label "BLOCK_$if_EDROP_DST"

# Block anything with source/destination port number 0, TCP/UDP.
# Taken from pfSense.
block drop in log quick on egress proto { tcp, udp } \
    from any port = 0 to any label "BLOCK_$if_PORT_ZERO_SRC"
block drop in log quick on egress proto { tcp, udp } \
    from any to any port = 0 label "BLOCK_$if_PORT_ZERO_DST"


# Block chargen, not useful for anything.
block drop log quick proto udp from any to any port chargen \
    label "BLOCK_$if_CHARGEN"

# End of rules for dropping unwanted traffic


# Pass rules

# Pass rules for traffic leaving out via interfaces
# -----------------------------------------------------------------------------

# Allow all outbound traffic on all interfaces. Keep log of important traffic.

# DHCP out to ISP
pass out log quick on egress inet proto udp \
    from any port bootpc to any port bootps label "PASS_$if_DHCP_OUT"

# DHCP out on lan interface
pass out log quick on $INT_IF inet proto udp \
    from any port = bootps to any port bootpc label "PASS_$if_DHCP_OUT"

# Encapsulated IPv6 to the SixXS POP
pass out log quick on egress proto ipv6 from (egress:0) to $IP_SIXXS_POP_DNA \
    label "PASS_$if_$proto_OUT"

# SSH
pass out log quick on egress inet proto tcp from (egress:0) to any port ssh \
    label "PASS_$if_$dstport_OUT" 

# Outgoing FTP
pass out log quick on egress proto tcp from (egress:0) to any port ftp \
    label "PASS_$if_$dstport_OUT"

pass out quick

# Pass rules for traffic coming in on an interface

# Anti-lockout rules, keep these here even if later rules allow everything in
# Allow DNS, SSH and DHCP to firewall on INT_IF. 
pass in quick on $INT_IF proto { udp tcp } from $INT_IF:network to $INT_IF port domain \
    label "PASS_$if_$proto_$dstport_IN"
pass in log quick on $INT_IF proto tcp from $INT_IF:network to $INT_IF port ssh \
    label "PASS_$if_$dstport_IN"
pass in log quick on $INT_IF proto udp from any port bootpc to any port bootps \
    label "PASS_$if_$proto_$dstport_IN"

# Do not create states for IPv4 multicast traffic that comes in on INT_IF
pass in quick on $INT_IF inet from any to 224.0.0.0/3 no state \
    label "PASS_$if_MULTICAST_IN_NO_STATE"

# Same for UDP broadcast
pass in quick on $INT_IF inet proto udp from any to $INT_IF:broadcast no state \
    label "PASS_$if_UDP_BROADCAST_IN_NO_STATE"

# LAN interface. Pass everything.
pass in quick on $INT_IF


# WAN interface(s), group egress.

# Allow encapsulated IPv6 on egress from DNA POP.
pass in quick on egress inet proto ipv6 from $IP_SIXXS_POP_DNA to (egress:0)

# ipv4(4) icmp(4) messages that should pass in on egress
pass in quick on egress inet proto icmp icmp-type $ICMP_TYPES \
    label "PASS_$if_ICMP_IN"

# ipv6(4) icmp6(4) messages that should pass in on egress
pass in quick on egress inet6 proto icmp6 icmp6-type $ICMP6_TYPES \
    label "PASS_$if_IPV6_ICMP6_IN"


# SSH in from the internet.
pass in quick on egress inet proto tcp from any to (egress:0) port $PORT_SSH_EXTERNAL \
    rdr-to localhost port ssh

# Bittorrent client running on beat.
pass in quick on egress inet proto { tcp udp } from any to (egress:0) port $PORT_XMISSION \
    rdr-to beat.rdnzl.info



