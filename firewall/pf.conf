
# Macros, macro names in all uppercase

LOOPBACK = lo0
WAN = vr0
WAN_IPV6 = gif0
LAN = rl0


IP_ISP_DHCP = 88.195.96.1

POP_DNA = 62.78.96.38 

# Transmission listening port on beat
PORT_XMISSION = 51413

# External SSH port on firewall
PORT_SSH_EXTERNAL = 50022


# icmp(4) types to pass in on WAN
ICMP_TYPES = "{ echoreq }"

# icmp6(4) types to pass in on WAN_IPV6
# these are in numerically ascending order
ICMP6_TYPES = "{ unreach toobig timex paramprob echoreq routeradv neighbradv } "


# Tables

# Bogons

# IPv4 fullbogons
table <ip_fullbogons_ipv4> persist file "/var/db/pf-tables/fullbogons-ipv4.txt"
IP_FULLBOGONS_IPV4 = "<ip_fullbogons_ipv4>"

# IPv6 fullbogons
#table <ip_fullbogons_ipv6> persist file "/var/db/pf-tables/fullbogons-ipv6.txt"
#IP_FULLBOGONS_IPV6 = "<ip_fullbogons_ipv6>"

# Spamhaus DROP and EDROP lists
table <ip_drop> persist file "/var/db/pf-tables/drop.txt" 
IP_DROP = "<ip_drop>"

table <ip_edrop> persist file "/var/db/pf-tables/edrop.txt"
IP_EDROP = "<ip_edrop>"

# Options
# =============================================================================

#set ruleset-optimization none
#set optimization conservative
set block-policy drop
set loginterface $WAN


#set limit table-entries 30000
set limit states 50000
#set timeout udp.first 120
#set timeout udp.single 60
#set timeout udp.multiple 120

# No filtering on loopback
set skip on $LOOPBACK

# Normalization
scrub on $WAN all fragment reassemble random-id no-df
#scrub on $WAN_IPV6 all fragment reassemble #random-id no-df
scrub on $LAN all fragment reassemble random-id no-df

# Queues
# =============================================================================

#altq on $WAN priq bandwidth 1.7Mb queue { qWAN_std, qWAN_proto41, qWAN_http, \
#    qWAN_ftp, qWAN_ssh, qWAN_dns, qWAN_icmp, qWAN_tcp_ack }

#queue qWAN_std       priority 0 priq( default ecn )
#queue qWAN_proto41   priority 1
#queue qWAN_ftp       priority 7
#queue qWAN_http      priority 8
#queue qWAN_icmp      priority 9
#queue qWAN_dns       priority 12
#queue qWAN_ssh       priority 13 priq( ecn )
#queue qWAN_tcp_ack   priority 15

# Address translation
# =============================================================================

# Default NAT rule. Source NAT all IPv4 traffic from $LAN:network to the WAN IP address
nat on $WAN inet from $LAN:network to any -> ($WAN:0) port 1024:65535

# External SSH access to the firewall on a non-standard port. Use tag for easier rule later.
rdr on $WAN inet proto tcp from any to ($WAN) port $PORT_SSH_EXTERNAL tag SSH_EXTERNAL -> localhost port 22

# Transmission on beat. Use tags for easier rules later.
rdr on $WAN inet proto { tcp udp } from any to ($WAN) port $PORT_XMISSION tag XMISSION -> beat.rdnzl.info port $PORT_XMISSION
#rdr on $WAN inet proto udp from any to ($WAN) port $PORT_XMISSION tag XMISSION_UDP -> beat.rdnzl.info port $PORT_XMISSION


# Filter rules
# =============================================================================

# Block rules
# =============================================================================

# Default deny rule(s)
block all
block inet6 all


# Rules for dropping unwanted traffic
# -----------------------------------------------------------------------------

# Antispoof for interfaces, this is a policy that can be overridden later,
# IPv4 only.
antispoof log for ($WAN) inet

# Block traffic from IPv4 bogons on WAN.
block drop in log quick on $WAN inet from $IP_FULLBOGONS_IPV4 to any

# Block traffic from IPv6 bogons.
#block drop in log quick on $WAN_IPV6 inet6 from $IP_FULLBOGONS_IPV6 to any

# SixXS recommends blocking this prefix.
block drop in log quick on $WAN_IPV6 inet6 from fd00::/48 to any 

# Block anything on Spamhaus E/DROP list, in or out.
# These are IPv4 only.

# Any connection coming in on LAN to DROP IPs
# Return so the connections fail immediately and are not stuck waiting.
block return in log quick on $LAN inet from any to $IP_DROP
block return in log quick on $LAN inet from any to $IP_EDROP

# Any connection from DROP IP addresses to any address, always drop
block drop in log quick on $WAN inet from $IP_DROP to any
block drop in log quick on $WAN inet from $IP_EDROP to any

# Any connections made to DROP IP addresses from the firewall itself
block return out log quick on $WAN inet from any to $IP_DROP
block return out log quick on $WAN inet from any to $IP_EDROP

# Block anything with source/destination port number 0, tcp and udp.
# Taken from pfSense.
block drop in log quick on $WAN inet proto { tcp, udp } \
    from any port = 0 to any
block drop in log quick on $WAN inet proto { tcp, udp } \
    from any to any port = 0

block drop in log quick on $WAN_IPV6 inet6 proto { tcp, udp } \
    from any port = 0 to any
block drop in log quick on $WAN_IPV6 inet6 proto { tcp, udp } \
    from any to any port = 0 



# Block all IPv6 on the IPv4 WAN interface
block drop quick on $WAN inet6 all

# Block chargen, not useful for anything.
block drop in quick proto udp from any to any port chargen 

# End of rules for dropping unwanted traffic


# Rules for silencing log noise, for example SMB broadcasts
# -----------------------------------------------------------------------------


# Pass rules
# -----------------------------------------------------------------------------

# Allow ICMP and ICMP6 from any to any
# ICMP on the IPv4 WAN is queued on qWAN_icmp
# TODO: Limit to only certain ICMP types.
#pass quick on $WAN inet proto icmp all queue(qWAN_icmp)
#pass quick inet proto icmp all

# ipv4(4) icmp(4) messages that should pass in on WAN

pass in quick on $WAN inet proto icmp icmp-type $ICMP_TYPES

# ipv6(4) icmp6(4) messages that should pass in on WAN_IPV6

pass in quick on $WAN_IPV6 inet6 proto icmp6 icmp6-type $ICMP6_TYPES



# Pass out rules for traffic leaving out via interfaces
# -----------------------------------------------------------------------------


# Pass all outgoing traffic but keep log of important traffic

# Assign outgoing traffic to queues

# ICMP
pass out quick on $WAN inet proto icmp all # queue(qWAN_icmp)

# DHCP out to ISP
pass out log quick on $WAN inet proto udp \
    from any port bootpc to $IP_ISP_DHCP port bootps 

# DHCP out on lan interface
pass out log quick on $LAN inet proto udp \
    from $LAN port = bootps to any port bootpc

# WAN queues

# Encapsulated IPv6 to the SixXS POP
pass out log quick on $WAN proto ipv6 from ($WAN) to $POP_DNA #queue(qWAN_proto41)

# DNS traffic
pass out quick on $WAN inet proto { tcp udp } \
    from ($WAN) to any port domain #queue(qWAN_dns)

# HTTP(S)
pass out quick on $WAN inet proto tcp \
    from ($WAN) to any port {http https 1935} #queue(qWAN_http, qWAN_tcp_ack)

# SSH, interactive ssh goes to qWAN_ssh, bulk transfer to qWAN_std.
pass out log quick on $WAN inet proto tcp \
    from ($WAN) to any port ssh #queue(qWAN_std, qWAN_ssh)

# Outgoing FTP
pass out log quick on $WAN proto tcp from ($WAN) to any port 21 \
    #queue(qWAN_ftp, qWAN_tcp_ack)


# Any other TCP connection
# TCP ACKs go to tcp_ack, other packets to std
pass out quick on $WAN inet proto tcp \
    from ($WAN) to any #queue(qWAN_std, qWAN_tcp_ack)


# Allow all outbound traffic on all interfaces,
# do whatever filtering on inbound.
pass out quick all


# Incoming traffic
# -----------------------------------------------------------------------------

# Anti-lockout rules, keep these here even if later rules allow everything in
# Allow DNS, SSH and DHCP to firewall on internal 
pass in quick on $LAN proto { udp tcp } from $LAN:network to $LAN port domain
pass in log quick on $LAN proto tcp from $LAN:network to $LAN port ssh 
pass in log quick on $LAN proto udp from any to any port bootps

# Allow everything in on LAN.
pass in quick on $LAN from any to any


# Pass rules for traffic allowed in from the internet
# -----------------------------------------------------------------------------

# Allow tunnelled IPv6 from SixXS PoP.
pass in log quick on $WAN inet proto ipv6 \
    from $POP_DNA to ($WAN) #queue(qWAN_proto41)
pass in log quick on $WAN inet proto icmp \
    from $POP_DNA to ($WAN) #queue(qWAN_icmp)

# Transmission
pass in quick on $WAN tagged XMISSION #queue(qWAN_std, qWAN_tcp_ack)
#pass in quick on $WAN tagged XMISSION_UDP

# Allow transmission to use IPv6
pass in quick on $WAN_IPV6 inet6 proto { tcp udp } \
   from any to beat.rdnzl.info port $PORT_XMISSION

# SSH to firewall itself 
pass in log quick on $WAN tagged SSH_EXTERNAL #queue(qWAN_std, qWAN_ssh)
# SSH to the IPv6 tunnel endpoint
pass in log quick on $WAN_IPV6 inet6 proto tcp \
    from any to fw-ext.rdnzl.info port ssh

