
# Macros, macro names in all uppercase

LOOPBACK = lo0
WAN = vr0
WAN_IPV6 = gif0
LAN = rl0
LAN1 = rl1


IP_ISP_DHCP = 88.195.96.1

POP_DNA = 62.78.96.38 


#PORT_XMISSION = 51413



# Tables

# Overload table in case needed
#table <ip_overload> persist
#IP_OVERLOAD = "<ip_overload>"

# Block table for security/sshguard-pf
table <sshguard> persist
IP_SSHGUARD = "<sshguard>"

# Bogons.
# IPv4 fullbogons
table <ip_fullbogons_ipv4> persist file "/var/db/pf-tables/fullbogons-ipv4.txt"
IP_FULLBOGONS_IPV4 = "<ip_fullbogons_ipv4>"

# IPv6 fullbogons
table <ip_fullbogons_ipv6> persist file "/var/db/pf-tables/fullbogons-ipv6.txt"
IP_FULLBOGONS_IPV6 = "<ip_fullbogons_ipv6>"




# Spamhaus DROP and EDROP lists
table <ip_drop> persist file "/var/db/pf-tables/drop.txt" 
IP_DROP = "<ip_drop>"

table <ip_edrop> persist file "/var/db/pf-tables/edrop.txt"
IP_EDROP = "<ip_edrop>"


# Options
# =============================================================================

#set ruleset-optimization none
set optimization conservative
set block-policy return
set loginterface $WAN


set limit table-entries 300000

set timeout udp.first 120
set timeout udp.single 60
set timeout udp.multiple 120
# Don't filter on loopback
set skip on $LOOPBACK

# Normalization
#no scrub on $WAN all
#no scrub on $WAN inet proto { tcp udp } from any to any port domain
#no scrub on $WAN_IPV6 inet6 proto { tcp udp } from any to any port domain
scrub on $WAN all fragment reassemble random-id no-df
scrub on $WAN_IPV6 all fragment reassemble random-id no-df
scrub on { $LAN $LAN1}  all fragment reassemble random-id no-df

# Queues
# =============================================================================

altq on $WAN priq bandwidth 1.7Mb queue { qWAN_std, qWAN_proto41, qWAN_http, \
    qWAN_ftp, qWAN_ssh, qWAN_dns, qWAN_icmp, qWAN_tcp_ack }

queue qWAN_std       priority 0 priq( default ecn )
queue qWAN_proto41   priority 1
queue qWAN_ftp       priority 7
queue qWAN_http      priority 8
queue qWAN_icmp      priority 9
queue qWAN_dns       priority 12
queue qWAN_ssh       priority 13 priq( ecn )
queue qWAN_tcp_ack   priority 15

#altq on $LAN cbq bandwidth 18Mb queue { qLAN_std, qLAN_http, qLAN_ssh, qLAN_dns }

#queue qLAN_std      bandwidth 10Mb cbq(default)
#queue qLAN_http     bandwidth 6Mb priority 3 cbq(borrow)  
#queue qLAN_ssh      bandwidth 500Kb priority 4
#queue qLAN_dns      bandwidth 120Kb priority 5

# Address translation
# =============================================================================
nat-anchor "ftp-proxy/*"

#nat-anchor "openvpn"

# Default NAT rule. Source NAT all IPv4 traffic from $LAN:network to the WAN ip-address
nat on $WAN inet from $LAN:network to any -> ($WAN:0) port 1024:65535


# ftp-proxy rdr anchor
rdr-anchor "ftp-proxy/*"

rdr on $LAN inet proto tcp from $LAN:network to ! $LAN port 21 -> \
    127.0.0.1 port 8021

rdr on $WAN inet proto tcp from any to ($WAN) port 50022 -> localhost port 22
rdr on $LAN inet proto tcp from $LAN:network to ($WAN) port 50022 -> localhost port 22

rdr-anchor "miniupnpd"




# Filter rules
# =============================================================================

# Block rules
# =============================================================================

# Default deny rule(s)
block return all
block return-icmp6 inet6 all


# Rules for dropping unwanted traffic
# -----------------------------------------------------------------------------

# Antispoof for interfaces, this is a policy that can be overridden later,
# IPv4 only.
antispoof log for ($WAN) inet

# overload table, always drop.
# block drop in log quick on $WAN inet from $IP_OVERLOAD to any

# sshguard blocked addresses, always drop
block drop in log quick on $WAN inet from $IP_SSHGUARD to any

# Block traffic from IPv4 bogons on WAN.
block drop in log quick on $WAN inet from $IP_FULLBOGONS_IPV4 to any

# Block traffic from IPv6 bogons.
block drop in log quick on $WAN_IPV6 inet6 from $IP_FULLBOGONS_IPV6 to any

block drop in log quick on $WAN_IPV6 inet6 from fd00::/48 to any 

# Block anything on Spamhaus E/DROP list, in or out.
# These are IPv4 only.

# Any connection coming in on LAN or DMZ to DROP IPs
# Return so the connections fail immediately.
block return in log quick on $LAN inet from any to $IP_DROP
block return in log quick on $LAN inet from any to $IP_EDROP

# Any connection from DROP IP addresses to any address, always drop
block drop in log quick on $WAN inet from $IP_DROP to any
block drop in log quick on $WAN inet from $IP_EDROP to any

# Any connections made to DROP IP addresses from the firewall itself
block return out log quick on $WAN inet from any to $IP_DROP
block return out log quick on $WAN inet from any to $IP_EDROP

# Block anything with source/destination port number 0, tcp and udp.
# Taken from pfSense. Return to politely inform the sender
block return in log quick on $WAN inet proto { tcp, udp } \
    from any port = 0 to any
block return in log quick on $WAN inet proto { tcp, udp } \
    from any to any port = 0

block return-icmp6 in log quick on $WAN_IPV6 inet6 proto { tcp, udp } \
    from any port = 0 to any
block return-icmp6 in log quick on $WAN_IPV6 inet6 proto { tcp, udp } \
    from any to any port = 0 

# Block all outgoing mDNS on WAN interfaces

#block return out log quick on { $WAN $WAN_IPV6 } proto udp from any to any \
#    port mdns 

# Block all IPv6 on the IPv4 WAN interface
block return-icmp6 log quick on $WAN inet6 all

block drop in log quick proto udp from any to any port chargen 

# End rules for dropping unwanted traffic


# Rules for silencing log noise, for example SMB broadcasts
# -----------------------------------------------------------------------------


# Pass rules
# -----------------------------------------------------------------------------

# Allow ICMP and ICMP6 from any to any
# ICMP on the IPv4 WAN is queued on qWAN_icmp
pass quick on $WAN inet proto icmp all queue(qWAN_icmp)
pass quick inet proto icmp all
pass quick inet6 proto icmp6 all


# Allow all IPv4 on gif0, this may not be necessary.
#pass log quick on $WAN_IPV6 inet all

# Pass out rules for traffic leaving out via interfaces
# -----------------------------------------------------------------------------


# Pass all outgoing traffic but keep log of important traffic

# DHCP out to ISP
pass out log quick on $WAN inet proto udp \
    from any port bootpc to $IP_ISP_DHCP port bootps 

# DHCP out on lan interface
pass out log quick on $LAN inet proto udp \
    from $LAN port = bootps to any port bootpc


# Assign outgoing traffic to queues

# WAN queues

# Encapsulated IPv6 to the SixXS POP
pass out log quick on $WAN proto ipv6 \
    from ($WAN) to $POP_DNA queue(qWAN_proto41)

# DNS traffic
pass out quick on $WAN inet proto { tcp udp } \
    from ($WAN) to any port domain queue(qWAN_dns)

# HTTP(S)
pass out quick on $WAN inet proto tcp \
    from ($WAN) to any port {http https 1935} queue(qWAN_http, qWAN_tcp_ack)

# SSH, interactive ssh goes to qWAN_ssh, bulk transfer to qWAN_std.
pass out log quick on $WAN inet proto tcp \
    from ($WAN) to any port ssh queue(qWAN_std, qWAN_ssh)

# Outgoing FTP
pass out log quick on $WAN proto tcp from ($WAN) to any port 21 \
    queue(qWAN_ftp, qWAN_tcp_ack)


# Any other TCP connection
# TCP ACKs go to tcp_ack, other packets to std
pass out quick on $WAN inet proto tcp \
    from ($WAN) to any queue(qWAN_std, qWAN_tcp_ack)


# LAN queues
#pass out quick on $LAN inet proto tcp from ! $LAN port { http https } to $LAN:network \
#    queue(qLAN_http)


# Allow all outbound traffic on all interfaces,
# do whatever filtering on inbound.
pass out quick all


# Incoming traffic
# -----------------------------------------------------------------------------

# Anti-lockout rules, keep these here even if later rules allow everything in
# Allow DNS and ssh to firewall on internal 
pass in quick on $LAN proto { udp tcp } from $LAN:network to $LAN port domain
pass in log quick on $LAN proto tcp from $LAN:network to $LAN port ssh 

# Allow everything in on LAN.

#pass in quick on $LAN proto tcp from $LAN:network to ! $LAN port { http https } \
#    queue(qLAN_http)

  
pass in quick on $LAN from any to any
#pass in quick on $LAN1 from any to any




# Pass rules for traffic allowed in from the internet
# -----------------------------------------------------------------------------
anchor "ftp-proxy/*"

#anchor "openvpn"

# miniupnpd
anchor "miniupnpd"


# This may be redundant since the aiccu service initiates the connection. 
pass in log quick on $WAN inet proto ipv6 \
    from $POP_DNA to ($WAN) queue(qWAN_proto41)


# Transmission
#pass in quick on $WAN tagged XMISSION_TCP \
#    queue(qWAN_std, qWAN_tcp_ack)
#pass in quick on $WAN tagged XMISSION_UDP

# Allow transmission to use IPv6
#pass in quick on $WAN_IPV6 inet6 proto { tcp udp } \
#   from any to beat port $PORT_XMISSION

# SSH to firewall itself 
pass in log quick on $WAN inet proto tcp from any to ($WAN) port 50022 \
    queue(qWAN_std, qWAN_ssh)
# SSH to the IPv6 tunnel endpoint
pass in log quick on $WAN_IPV6 inet6 proto tcp \
    from any to fw-ext.rdnzl.info port ssh


# SMTP in
#pass in log quick on $WAN inet proto tcp from any to ($WAN) port smtp \
#    queue(qWAN_std, qWAN_tcp_ack)

#pass in log quick on $WAN_IPV6 inet6 proto tcp from any to mail.rdnzl.info port smtp

