
# Macros, names in all uppercase.

LOOPBACK = lo0
WAN = vr0
WAN_IPV6 = gif0
LAN = rl0

# Sonera DHCP server address
IP_ISP_DHCP = 88.195.96.1

# SixXS DNA POP address
IP_SIXXS_POP_DNA = 62.78.96.38 

# IP addresses for accessing the web configurator of the ADSL modem on WAN.
IP_ADSL_MODEM = 192.168.1.1
IP_WAN_ALIAS = 192.168.1.200

# Transmission listening port on beat.
# Remember to sync this with the setting in the app.
PORT_XMISSION = 51413

# External SSH port on firewall, IPv4.
PORT_SSH_EXTERNAL = 50022

# icmp(4) types to pass in on WAN
ICMP_TYPES = "{ echoreq }"

# icmp6(4) types to pass in on WAN_IPV6
ICMP6_TYPES = "{ unreach toobig timex paramprob echoreq routeradv neighbradv } "


# Tables

# Bogons

# IPv4 fullbogons
table <ip_fullbogons_ipv4> persist file "/var/db/pf-tables/fullbogons-ipv4.txt"
IP_FULLBOGONS_IPV4 = "<ip_fullbogons_ipv4>"

# IPv6 fullbogons
#table <ip_fullbogons_ipv6> persist file "/var/db/pf-tables/fullbogons-ipv6.txt"
#IP_FULLBOGONS_IPV6 = "<ip_fullbogons_ipv6>"

# Spamhaus DROP and EDROP lists
table <ip_drop> persist file "/var/db/pf-tables/drop.txt" 
IP_DROP = "<ip_drop>"

table <ip_edrop> persist file "/var/db/pf-tables/edrop.txt"
IP_EDROP = "<ip_edrop>"

# Options
# =============================================================================

#set ruleset-optimization none
set optimization conservative
set block-policy drop
set loginterface $WAN


set limit table-entries 100000
set limit states 10000
#set timeout udp.first 120
#set timeout udp.single 60
#set timeout udp.multiple 120

# No filtering on loopback
set skip on $LOOPBACK

# Normalization
scrub on $WAN all fragment reassemble random-id no-df
scrub on $WAN_IPV6 inet6 all fragment reassemble random-id no-df
scrub on $LAN all fragment reassemble random-id no-df


# Address translation
# =============================================================================

# Access to the web configurator of the ADSL modem on WAN side.
# Note that this will very likely bomb if the WAN has no address because the ISP DHCP
# happens to be down. TODO: move this and the matching filter rule to an anchor and
# add the rules from a dhclient(8) script that is only run when the WAN really has
# a proper address. 
nat on $WAN inet from any to $IP_ADSL_MODEM -> $IP_WAN_ALIAS port 1024:65535

# Default NAT rule. Source NAT all IPv4 traffic from any address but the WAN IP to the WAN IP address
nat on $WAN inet from ! ($WAN:0) to any -> ($WAN:0) port 1024:65535

# External SSH access to the firewall on a non-standard port. Use tag for easier rule later.
rdr on $WAN inet proto tcp from any to ($WAN) port $PORT_SSH_EXTERNAL tag SSH_EXTERNAL -> localhost port 22

# Transmission on beat. Use tags for easier rules later.
rdr on $WAN inet proto { tcp udp } from any to ($WAN) port $PORT_XMISSION tag XMISSION -> beat.rdnzl.info port $PORT_XMISSION


# Filter rules
# =============================================================================

# Block rules
# =============================================================================

# Default deny rule(s)
block all label "DEFAULT_DENY"
block inet6 all label "DEFAULT_DENY_IPV6"


# Rules for dropping unwanted traffic
# -----------------------------------------------------------------------------


# Exceptions to the following rules must be placed first.
pass out quick on $WAN inet from any to $IP_ADSL_MODEM label "PASS_$if_ADSLMODEM_OUT"

block drop in log quick on $WAN from no-route to any label "BLOCK_$if_NO_ROUTE"

block drop in log quick on $WAN from urpf-failed to any label "BLOCK_$if_URPF_FAILED"


# Antispoof for interfaces, this is a policy that can be overridden later,
# IPv4 only.
antispoof log for { ($WAN) $LAN } inet label "ANTISPOOF"

# Block traffic from/to IPv4 bogons.
block drop in log quick on $WAN inet from $IP_FULLBOGONS_IPV4 to any label "BLOCK_IPV4_FULLBOGONS_SRC"
block return out log quick on $WAN inet from any to $IP_FULLBOGONS_IPV4 label "BLOCK_IPV4_FULLBOGONS_DST"

# Block traffic from/to IPv6 bogons.
#block drop in log quick on $WAN_IPV6 inet6 from $IP_FULLBOGONS_IPV6 to any
#block return out quick log on $WAN_IPV6 inet6 from any to $IP_FULLBOGONS_IPV6


# SixXS recommends blocking this prefix.
block drop in log quick on $WAN_IPV6 inet6 from fd00::/48 to any label "BLOCK_$if_FD00_SRC"
block drop in log quick on $WAN_IPV6 inet6 from any to fd00::/48 label "BLOCK_$if_FD00_DST"


# Block anything on Spamhaus E/DROP list, in or out.
# These are IPv4 only.

# Any connection coming in on LAN to DROP IPs
# Return so the connections fail immediately and are not stuck waiting.
block return in log quick on $LAN inet from any to $IP_DROP label "BLOCK_$if_DROP_DST"
block return in log quick on $LAN inet from any to $IP_EDROP label "BLOCK_$if_EDROP_DST"

# Any connection from DROP IP addresses to any address, always drop.
block drop in log quick on $WAN inet from $IP_DROP to any label "BLOCK_$if_DROP_SRC"
block drop in log quick on $WAN inet from $IP_EDROP to any label "BLOCK_$if_EDROP_SRC"

# Any connections made to DROP IP addresses from the firewall itself.
block return out log quick on $WAN inet from any to $IP_DROP label "BLOCK_$if_DROP_DST"
block return out log quick on $WAN inet from any to $IP_EDROP label "BLOCK_$if_EDROP_DST"

# Block anything with source/destination port number 0, tcp and udp.
# Taken from pfSense.
block drop in log quick on $WAN inet proto { tcp, udp } \
    from any port = 0 to any label "BLOCK_$if_PORT_ZERO_SRC"
block drop in log quick on $WAN inet proto { tcp, udp } \
    from any to any port = 0 label "BLOCK_$if_PORT_ZERO_DST"

block drop in log quick on $WAN_IPV6 inet6 proto { tcp, udp } \
    from any port = 0 to any label "BLOCK_$if_IPV6_PORT_ZERO_SRC"
block drop in log quick on $WAN_IPV6 inet6 proto { tcp, udp } \
    from any to any port = 0 label "BLOCK_$if_IPV6_PORT_ZERO_DST"



# Block chargen, not useful for anything.
block drop in quick on $WAN proto udp from any to any port chargen label "BLOCK_$if_CHARGEN"

# End of rules for dropping unwanted traffic




# Pass rules
# -----------------------------------------------------------------------------



# Pass rules for traffic leaving out via interfaces
# -----------------------------------------------------------------------------

# Allow all outbound traffic on all interfaces, do whatever filtering on 
# inbound. Traffic leaving the firewall itself is handled specially,
# see above for the DROP/EDROP rules. Keep log of important traffic.

# DHCP out to ISP
pass out log quick on $WAN inet proto udp \
    from any port bootpc to $IP_ISP_DHCP port bootps label "PASS_$if_DHCP_OUT"

# DHCP out on lan interface
pass out log quick on $LAN inet proto udp \
    from $LAN port = bootps to any port bootpc label "PASS_$if_DHCP_OUT"

# Encapsulated IPv6 to the SixXS POP
pass out log quick on $WAN proto ipv6 from ($WAN) to $IP_SIXXS_POP_DNA label "PASS_$if_$proto_OUT"

# SSH
pass out log quick on $WAN inet proto tcp \
    from ($WAN) to any port ssh label "PASS_$if_$dstport_OUT" 

# Outgoing FTP
pass out log quick on $WAN proto tcp from ($WAN) to any port ftp label "PASS_$if_$dstport_OUT"

pass out quick all label "PASS_$if_ALL_OUT"


# Incoming traffic
# -----------------------------------------------------------------------------

# ipv4(4) icmp(4) messages that should pass in on WAN
pass in quick on $WAN inet proto icmp icmp-type $ICMP_TYPES label "PASS_$if_ICMP_IN"

# ipv6(4) icmp6(4) messages that should pass in on WAN_IPV6
pass in quick on $WAN_IPV6 inet6 proto icmp6 icmp6-type $ICMP6_TYPES label "PASS_$if_IPV6_ICMP6_IN"

# Anti-lockout rules, keep these here even if later rules allow everything in
# Allow DNS, SSH and DHCP to firewall on internal 
pass in quick on $LAN proto { udp tcp } from $LAN:network to $LAN port domain label "PASS_$if_$proto_$dstport_IN"
pass in log quick on $LAN proto tcp from $LAN:network to $LAN port ssh label "PASS_$if_$dstport_IN"
pass in log quick on $LAN proto udp from any to any port bootps label "PASS_$if_$proto_$dstport_IN"

# Do not create states for multicast traffic that comes in on LAN
pass in quick on $LAN from any to 224.0.0.0/3 no state

# Same for UDP broadcast
pass in quick on $LAN proto udp from any to $LAN:broadcast no state

# Allow everything in on LAN.
pass in quick on $LAN from any to any label "PASS_$if_ALL_IN"


# Pass rules for traffic allowed in from the internet
# -----------------------------------------------------------------------------

# Allow tunnelled IPv6 from SixXS PoP.
pass in log quick on $WAN inet proto ipv6 \
    from $IP_SIXXS_POP_DNA to ($WAN) label "PASS_$if_$proto_IN"

# Transmission
pass in quick on $WAN tagged XMISSION label "PASS_$if_XMISSION_IN"

# Allow transmission to use IPv6
pass in quick on $WAN_IPV6 inet6 proto { tcp udp } \
   from any to beat.rdnzl.info port $PORT_XMISSION label "PASS_$if_IPV6_XMISSION_IN"

# SSH to firewall itself 
pass in log quick on $WAN tagged SSH_EXTERNAL label "PASS_$if_SSH_IN"

# SSH to the IPv6 tunnel endpoint
pass in log quick on $WAN_IPV6 inet6 proto tcp \
    from any to fw-ext.rdnzl.info port ssh label "PASS_$if_IPV6_SSH_IN"

